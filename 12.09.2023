
//Zadaniye 1

//using System;

//class Program
//{
//    static void Main()
//    {
//        int a = 5, b = 10;
//        Console.WriteLine($"Before swap: a = {a}, b = {b}");

//        Swap(ref a, ref b);

//        Console.WriteLine($"After swap: a = {a}, b = {b}");


//        string str1 = "Hello", str2 = "World";
//        Console.WriteLine($"Before swap: str1 = {str1}, str2 = {str2}");

//        Swap(ref str1, ref str2);

//        Console.WriteLine($"After swap: str1 = {str1}, str2 = {str2}");
//    }


//    static void Swap<T>(ref T a, ref T b)
//    {
//        T temp = a;
//        a = b;
//        b = temp;
//    }
//}


//Zadaniye 2

//using System;
//using System.Collections.Generic;


//public class PriorityQueue<T>
//{
//    private List<(T item, int priority)> elements;


//    public PriorityQueue()
//    {
//        elements = new List<(T item, int priority)>();
//    }


//    public int Count => elements.Count;


//    public void Enqueue(T item, int priority)
//    {
//        elements.Add((item, priority));
//        elements.Sort((x, y) => x.priority.CompareTo(y.priority));
//    }


//    public T Dequeue()
//    {
//        if (Count == 0)
//        {
//            throw new InvalidOperationException("Ochered s prioritetami pusta");
//        }

//        T item = elements[0].item;
//        elements.RemoveAt(0);
//        return item;
//    }


//    public T Peek()
//    {
//        if (Count == 0)
//        {
//            throw new InvalidOperationException("Ochered s prioritetami pusta.");
//        }

//        return elements[0].item;
//    }


//    public bool IsEmpty()
//    {
//        return Count == 0;
//    }
//}

//class Program
//{
//    static void Main()
//    {
//        PriorityQueue<string> priorityQueue = new PriorityQueue<string>();

//        priorityQueue.Enqueue("Item 1", 2);
//        priorityQueue.Enqueue("Item 2", 1);
//        priorityQueue.Enqueue("Item 3", 3);

//        while (!priorityQueue.IsEmpty())
//        {
//            string item = priorityQueue.Dequeue();
//            Console.WriteLine($"Dequeued: {item}");
//        }
//    }
//}


//Zadaniye 3

//using System;


//public class CircularQueue<T>
//{
//    private T[] elements;
//    private int capacity;
//    private int count;
//    private int front;
//    private int rear;


//    public CircularQueue(int capacity)
//    {
//        if (capacity <= 0)
//        {
//            throw new ArgumentException("Capacity should be greater than 0.");
//        }

//        this.capacity = capacity;
//        elements = new T[capacity];
//        count = 0;
//        front = 0;
//        rear = -1;
//    }


//    public int Count => count;


//    public void Enqueue(T item)
//    {
//        if (count == capacity)
//        {
//            throw new InvalidOperationException("Circular queue is full.");
//        }

//        rear = (rear + 1) % capacity;
//        elements[rear] = item;
//        count++;
//    }


//    public T Dequeue()
//    {
//        if (count == 0)
//        {
//            throw new InvalidOperationException("Circular queue is empty.");
//        }

//        T item = elements[front];
//        front = (front + 1) % capacity;
//        count--;

//        return item;
//    }


//    public T Peek()
//    {
//        if (count == 0)
//        {
//            throw new InvalidOperationException("Circular queue is empty.");
//        }

//        return elements[front];
//    }


//    public bool IsEmpty()
//    {
//        return count == 0;
//    }


//    public bool IsFull()
//    {
//        return count == capacity;
//    }
//}

//class Program
//{
//    static void Main()
//    {

//        CircularQueue<int> circularQueue = new CircularQueue<int>(5);

//        circularQueue.Enqueue(1);
//        circularQueue.Enqueue(2);
//        circularQueue.Enqueue(3);

//        while (!circularQueue.IsEmpty())
//        {
//            int item = circularQueue.Dequeue();
//            Console.WriteLine($"Dequeued: {item}");
//        }
//    }
//}



//Zadaniye 4
//using System;


//public class LinkedList<T>
//{

//    private class Node
//    {
//        public T Data { get; set; }
//        public Node Next { get; set; }

//        public Node(T data)
//        {
//            Data = data;
//            Next = null;
//        }
//    }

//    private Node head; 
//    private int count; 


//    public LinkedList()
//    {
//        head = null;
//        count = 0;
//    }


//    public int Count => count;


//    public void AddLast(T data)
//    {
//        Node newNode = new Node(data);

//        if (head == null)
//        {
//            head = newNode;
//        }
//        else
//        {
//            Node current = head;
//            while (current.Next != null)
//            {
//                current = current.Next;
//            }

//            current.Next = newNode;
//        }

//        count++;
//    }


//    public bool Remove(T data)
//    {
//        if (head == null)
//        {
//            return false;
//        }

//        if (head.Data.Equals(data))
//        {
//            head = head.Next;
//            count--;
//            return true;
//        }

//        Node current = head;
//        while (current.Next != null && !current.Next.Data.Equals(data))
//        {
//            current = current.Next;
//        }

//        if (current.Next != null)
//        {
//            current.Next = current.Next.Next;
//            count--;
//            return true;
//        }

//        return false;
//    }


//    public bool Contains(T data)
//    {
//        Node current = head;
//        while (current != null)
//        {
//            if (current.Data.Equals(data))
//            {
//                return true;
//            }
//            current = current.Next;
//        }

//        return false;
//    }


//    public void Clear()
//    {
//        head = null;
//        count = 0;
//    }


//    public void Print()
//    {
//        Node current = head;
//        while (current != null)
//        {
//            Console.Write($"{current.Data} ");
//            current = current.Next;
//        }
//        Console.WriteLine();
//    }
//}

//class Program
//{
//    static void Main()
//    {

//        LinkedList<string> linkedList = new LinkedList<string>();

//        linkedList.AddLast("Item 1");
//        linkedList.AddLast("Item 2");
//        linkedList.AddLast("Item 3");

//        Console.WriteLine($"Count: {linkedList.Count}");
//        linkedList.Print();

//        linkedList.Remove("Item 2");
//        Console.WriteLine($"Count: {linkedList.Count}");
//        linkedList.Print();

//        Console.WriteLine($"Contains 'Item 1': {linkedList.Contains("Item 1")}");
//        Console.WriteLine($"Contains 'Item 4': {linkedList.Contains("Item 4")}");

//        linkedList.Clear();
//        Console.WriteLine($"Count after clearing: {linkedList.Count}");
//    }
//}




//Zadaniye 5
//using System;


//public class DoublyLinkedList<T>
//{
    
//    private class Node
//    {
//        public T Data { get; set; }
//        public Node Next { get; set; }
//        public Node Previous { get; set; }

//        public Node(T data)
//        {
//            Data = data;
//            Next = null;
//            Previous = null;
//        }
//    }

//    private Node head; 
//    private Node tail; 
//    private int count; 

    
//    public DoublyLinkedList()
//    {
//        head = null;
//        tail = null;
//        count = 0;
//    }

    
//    public int Count => count;

    
//    public void AddLast(T data)
//    {
//        Node newNode = new Node(data);

//        if (head == null)
//        {
//            head = newNode;
//            tail = newNode;
//        }
//        else
//        {
//            newNode.Previous = tail;
//            tail.Next = newNode;
//            tail = newNode;
//        }

//        count++;
//    }

   
//    public bool Remove(T data)
//    {
//        Node current = head;

//        while (current != null)
//        {
//            if (current.Data.Equals(data))
//            {
//                if (current.Previous != null)
//                {
//                    current.Previous.Next = current.Next;
//                }
//                else
//                {
//                    head = current.Next;
//                }

//                if (current.Next != null)
//                {
//                    current.Next.Previous = current.Previous;
//                }
//                else
//                {
//                    tail = current.Previous;
//                }

//                count--;
//                return true;
//            }

//            current = current.Next;
//        }

//        return false;
//    }

    
//    public bool Contains(T data)
//    {
//        Node current = head;
//        while (current != null)
//        {
//            if (current.Data.Equals(data))
//            {
//                return true;
//            }
//            current = current.Next;
//        }

//        return false;
//    }

    
//    public void Clear()
//    {
//        head = null;
//        tail = null;
//        count = 0;
//    }

    
//    public void Print()
//    {
//        Node current = head;
//        while (current != null)
//        {
//            Console.Write($"{current.Data} ");
//            current = current.Next;
//        }
//        Console.WriteLine();
//    }
//}

//class Program
//{
//    static void Main()
//    {
        
//        DoublyLinkedList<int> doublyLinkedList = new DoublyLinkedList<int>();

//        doublyLinkedList.AddLast(1);
//        doublyLinkedList.AddLast(2);
//        doublyLinkedList.AddLast(3);

//        Console.WriteLine($"Count: {doublyLinkedList.Count}");
//        doublyLinkedList.Print();

//        doublyLinkedList.Remove(2);
//        Console.WriteLine($"Count: {doublyLinkedList.Count}");
//        doublyLinkedList.Print();

//        Console.WriteLine($"Contains 1: {doublyLinkedList.Contains(1)}");
//        Console.WriteLine($"Contains 4: {doublyLinkedList.Contains(4)}");

//        doublyLinkedList.Clear();
//        Console.WriteLine($"Count after clearing: {doublyLinkedList.Count}");
//    }
//}
